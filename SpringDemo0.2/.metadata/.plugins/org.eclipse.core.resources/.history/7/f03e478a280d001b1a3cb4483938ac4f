package hu.board;

import java.util.List;

import org.mybatis.spring.SqlSessionTemplate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.stereotype.Service;

import hu.admin.board.BoardGroupVO;
import hu.common.Field3VO;

@Service
public class BoardSvc {

	@Autowired
	private SqlSessionTemplate sqlSession;
	@Autowired
	private DataSourceTransactionManager txManager;
	
	static final Logger LOGGER = LoggerFactory.getLogger(BoardSvc.class);
	
	 /** 
     * 게시판 정보 (그룹).
     */
	public BoardGroupVO selectBoardGroupOne4Used(String param) {
		return sqlSession.selectOne("selectBoardGroupOne4Used", param);
	}
	
	/** ------------------------------------------
     * 게시판.
     */
	
	public Integer selectBoardCount(BoardSearchVO param) {
		return sqlSession.selectOne("selectBoardCount", param);
	}
	
	public List<?> selectBoardList(BoardSearchVO param){
		return sqlSession.selectList("selectBoardList",param);
	}
	
	public List<?> selectNoticeList(BoardSearchVO param) {
		return sqlSession.selectList("selectNoticeList", param);
	}
	
	
	/**
	 * 게시판 한개 읽었을때 정보들 select
	 */
	public BoardVO selectBoardOne(Field3VO param) {
		return sqlSession.selectOne("selectBoardOne", param);
	}
	
	 /**
     * 게시판 수정/삭제 권한 확인. 
     */
	public void updateBoardRead(Field3VO param) {
		sqlSession.insert("updateBoardRead", param);
	}
	
	
	/**
	 * 게시판 글 한개 클릭 시 하단에 나오는 파일 리스트, 댓글 리스트
	 */
	public List<?> selectBoardFileList(String param) {
		return sqlSession.selectList("selectBoardFileList", param);
	}
	
	public List<?> selectBoardReplyList(String param) {
		return sqlSession.selectList("selectBoardReplyList", param);
	}
	
	/**
     * 댓글 저장. 
     */
	public BoardReplyVO insertBoardReply(BoardReplyVO param) {
		if(param.getReno() == null || "".equals(param.getReno())) {
			if(param.getReparent() != null) {
				BoardReplyVO replyInfo = sqlSession.selectOne("selectBoardReplyParent", param.getReparent());
				param.setRedepth(replyInfo.getRedepth());
				param.setReorder(replyInfo.getReorder() + 1);
				sqlSession.selectOne("updateBoardReplyOrder", replyInfo);
			} else {
				Integer reorder = sqlSession.selectOne("selectBoardReplyMaxOrder", param.getBrdno());
				param.setReorder(reorder);
			}
			
			sqlSession.insert("insertBoardReply", param);
		} else {
			sqlSession.selectOne("updateBoardReply", param.getReno())
		}
	}
	
}
